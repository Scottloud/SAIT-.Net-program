@page "/search"

@using FinalOOProject.Services
@using FinalOOProject.Data
@inject BookService bookService

<div id="built-page">
<h1>Search</h1>
@if (bookList == null)
{
	<p><em>Loading...</em></p>
}
else{
	<div class="row">
		<div class="col-md-12">
			<div class="mb-3">
				<label class="form-label">Book Name:</label>
				<input type="text" @bind="searchName" class="form-control" placeholder="Any" />
			</div>
			<div class="mb-3">
				<label class="form-label">Author:</label>
				<input type="text" @bind="searchAuthor" class="form-control" placeholder="Any" />
			</div>
			<div class="mb-3">
				<label class="form-label">Tags:</label>
				<input type="text" @bind="searchTags" class="form-control" placeholder="Fiction,Fantasy,..." />
			</div>
			<button type="submit" class="btn btn-primary user-button " @onclick="SearchList">Search</button>

		</div>
	</div>
	@if ((matchingList != null) && (matchingList.Count() > 0))
	{
		<div class="user-table">
			<h2>Results</h2>
			<table class="table table-striped">
				<thead>
					<tr>
						<th>Name</th>
						<th>Author</th>
						<th>Status</th>
						<th></th>
					</tr>
				</thead>

				<tbody>
					@foreach (var book in matchingList)
					{
						<tr>
							<td>@book.Name</td>
							<td>@book.BookAuthor</td>
							@if (book.BookLentOut == 1)
							{
								<td>Out On Loan</td>
							}
							else
							{
								<td>At Library</td>
							}
							<td>
								<button class="btn btn-info" @onclick=@(() => ViewDetails(book))>Details</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
}
</div>

@code {
	private IEnumerable<BookInfo> bookList;
	private List<BookInfo> matchingList = new List<BookInfo>();

	protected override async Task OnInitializedAsync()
	{
		bookList = await bookService.GetXAsync();
	}

	private string searchName = null;
	private string searchAuthor = null;
	private string searchTags = null;


	public void SearchList()
	{
		matchingList.Clear();


		string[] searchParams = { searchName, searchAuthor, searchTags };
		foreach(var book in bookList)
		{
			bool match = true;
			for (int i = 0; i < searchParams.Length; i++)
			{
				if (string.IsNullOrEmpty(searchParams[i]))
				{
					continue;
				}
				if (i == 0 && !(book.Name.ToLower().Contains(searchParams[i].ToLower())))
				{
					match = false;
				}
				else if (i == 1 && !(book.BookAuthor.ToLower().Contains(searchParams[i].ToLower())))
				{
					match = false;
				}
				else if (i == 2 && !(book.BookTags.ToLower().Contains(searchParams[i].ToLower())))
				{
					match = false;
				}
			}
			if (match)
			{
				matchingList.Add(book);
			}
		}

		if (matchingList.Count() == 0)
		{
			App.Current.MainPage.DisplayAlert("Error", "Sorry, your search terms don't match any books on record.", "Try again");
		}

	}

	public void ViewDetails(BookInfo book)
	{
		App.Current.MainPage.DisplayAlert($"{book.Name}", $"Written by: {book.BookAuthor}\n\n{book.BookDesc}", "Ok");
	}
}
